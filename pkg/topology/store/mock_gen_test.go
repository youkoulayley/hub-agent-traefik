// Code generated by mocktail; DO NOT EDIT.

package store

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/mock"
	"github.com/traefik/hub-agent-traefik/pkg/topology"
)

// platformClientMock mock of PlatformClient.
type platformClientMock struct{ mock.Mock }

// newPlatformClientMock creates a new platformClientMock.
func newPlatformClientMock(tb testing.TB) *platformClientMock {
	tb.Helper()

	m := &platformClientMock{}
	m.Mock.Test(tb)

	tb.Cleanup(func() { m.AssertExpectations(tb) })

	return m
}

func (_m *platformClientMock) FetchTopology(_ context.Context) (topology.Reference, error) {
	_ret := _m.Called()

	reference, _ := _ret.Get(0).(topology.Reference)
	err := _ret.Error(1)

	return reference, err
}

func (_m *platformClientMock) OnFetchTopology() *platformClientFetchTopologyCall {
	return &platformClientFetchTopologyCall{Call: _m.Mock.On("FetchTopology"), Parent: _m}
}

func (_m *platformClientMock) OnFetchTopologyRaw() *platformClientFetchTopologyCall {
	return &platformClientFetchTopologyCall{Call: _m.Mock.On("FetchTopology"), Parent: _m}
}

type platformClientFetchTopologyCall struct {
	*mock.Call
	Parent *platformClientMock
}

func (_c *platformClientFetchTopologyCall) Panic(msg string) *platformClientFetchTopologyCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *platformClientFetchTopologyCall) Once() *platformClientFetchTopologyCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *platformClientFetchTopologyCall) Twice() *platformClientFetchTopologyCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *platformClientFetchTopologyCall) Times(i int) *platformClientFetchTopologyCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *platformClientFetchTopologyCall) WaitUntil(w <-chan time.Time) *platformClientFetchTopologyCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *platformClientFetchTopologyCall) After(d time.Duration) *platformClientFetchTopologyCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *platformClientFetchTopologyCall) Run(fn func(args mock.Arguments)) *platformClientFetchTopologyCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *platformClientFetchTopologyCall) Maybe() *platformClientFetchTopologyCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *platformClientFetchTopologyCall) TypedReturns(a topology.Reference, b error) *platformClientFetchTopologyCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *platformClientFetchTopologyCall) ReturnsFn(fn func() (topology.Reference, error)) *platformClientFetchTopologyCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *platformClientFetchTopologyCall) TypedRun(fn func()) *platformClientFetchTopologyCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		fn()
	})
	return _c
}

func (_c *platformClientFetchTopologyCall) OnFetchTopology() *platformClientFetchTopologyCall {
	return _c.Parent.OnFetchTopology()
}

func (_c *platformClientFetchTopologyCall) OnPatchTopology(patch []byte, lastKnownVersion int64) *platformClientPatchTopologyCall {
	return _c.Parent.OnPatchTopology(patch, lastKnownVersion)
}

func (_c *platformClientFetchTopologyCall) OnFetchTopologyRaw() *platformClientFetchTopologyCall {
	return _c.Parent.OnFetchTopologyRaw()
}

func (_c *platformClientFetchTopologyCall) OnPatchTopologyRaw(patch interface{}, lastKnownVersion interface{}) *platformClientPatchTopologyCall {
	return _c.Parent.OnPatchTopologyRaw(patch, lastKnownVersion)
}

func (_m *platformClientMock) PatchTopology(_ context.Context, patch []byte, lastKnownVersion int64) (int64, error) {
	_ret := _m.Called(patch, lastKnownVersion)

	if _rf, ok := _ret.Get(0).(func([]byte, int64) (int64, error)); ok {
		return _rf(patch, lastKnownVersion)
	}

	_ra0, _ := _ret.Get(0).(int64)
	_rb1 := _ret.Error(1)

	return _ra0, _rb1
}

func (_m *platformClientMock) OnPatchTopology(patch []byte, lastKnownVersion int64) *platformClientPatchTopologyCall {
	return &platformClientPatchTopologyCall{Call: _m.Mock.On("PatchTopology", patch, lastKnownVersion), Parent: _m}
}

func (_m *platformClientMock) OnPatchTopologyRaw(patch interface{}, lastKnownVersion interface{}) *platformClientPatchTopologyCall {
	return &platformClientPatchTopologyCall{Call: _m.Mock.On("PatchTopology", patch, lastKnownVersion), Parent: _m}
}

type platformClientPatchTopologyCall struct {
	*mock.Call
	Parent *platformClientMock
}

func (_c *platformClientPatchTopologyCall) Panic(msg string) *platformClientPatchTopologyCall {
	_c.Call = _c.Call.Panic(msg)
	return _c
}

func (_c *platformClientPatchTopologyCall) Once() *platformClientPatchTopologyCall {
	_c.Call = _c.Call.Once()
	return _c
}

func (_c *platformClientPatchTopologyCall) Twice() *platformClientPatchTopologyCall {
	_c.Call = _c.Call.Twice()
	return _c
}

func (_c *platformClientPatchTopologyCall) Times(i int) *platformClientPatchTopologyCall {
	_c.Call = _c.Call.Times(i)
	return _c
}

func (_c *platformClientPatchTopologyCall) WaitUntil(w <-chan time.Time) *platformClientPatchTopologyCall {
	_c.Call = _c.Call.WaitUntil(w)
	return _c
}

func (_c *platformClientPatchTopologyCall) After(d time.Duration) *platformClientPatchTopologyCall {
	_c.Call = _c.Call.After(d)
	return _c
}

func (_c *platformClientPatchTopologyCall) Run(fn func(args mock.Arguments)) *platformClientPatchTopologyCall {
	_c.Call = _c.Call.Run(fn)
	return _c
}

func (_c *platformClientPatchTopologyCall) Maybe() *platformClientPatchTopologyCall {
	_c.Call = _c.Call.Maybe()
	return _c
}

func (_c *platformClientPatchTopologyCall) TypedReturns(a int64, b error) *platformClientPatchTopologyCall {
	_c.Call = _c.Return(a, b)
	return _c
}

func (_c *platformClientPatchTopologyCall) ReturnsFn(fn func([]byte, int64) (int64, error)) *platformClientPatchTopologyCall {
	_c.Call = _c.Return(fn)
	return _c
}

func (_c *platformClientPatchTopologyCall) TypedRun(fn func([]byte, int64)) *platformClientPatchTopologyCall {
	_c.Call = _c.Call.Run(func(args mock.Arguments) {
		_patch, _ := args.Get(0).([]byte)
		_lastKnownVersion, _ := args.Get(1).(int64)
		fn(_patch, _lastKnownVersion)
	})
	return _c
}

func (_c *platformClientPatchTopologyCall) OnFetchTopology() *platformClientFetchTopologyCall {
	return _c.Parent.OnFetchTopology()
}

func (_c *platformClientPatchTopologyCall) OnPatchTopology(patch []byte, lastKnownVersion int64) *platformClientPatchTopologyCall {
	return _c.Parent.OnPatchTopology(patch, lastKnownVersion)
}

func (_c *platformClientPatchTopologyCall) OnFetchTopologyRaw() *platformClientFetchTopologyCall {
	return _c.Parent.OnFetchTopologyRaw()
}

func (_c *platformClientPatchTopologyCall) OnPatchTopologyRaw(patch interface{}, lastKnownVersion interface{}) *platformClientPatchTopologyCall {
	return _c.Parent.OnPatchTopologyRaw(patch, lastKnownVersion)
}
